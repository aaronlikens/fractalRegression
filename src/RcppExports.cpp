// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dcca
List dcca(arma::vec x, arma::vec y, int order, arma::ivec scales);
RcppExport SEXP _fractalRegression_dcca(SEXP xSEXP, SEXP ySEXP, SEXP orderSEXP, SEXP scalesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type order(orderSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type scales(scalesSEXP);
    rcpp_result_gen = Rcpp::wrap(dcca(x, y, order, scales));
    return rcpp_result_gen;
END_RCPP
}
// dfa
List dfa(NumericVector x, int order, int verbose, double sc_min, double sc_max, double scale_ratio);
RcppExport SEXP _fractalRegression_dfa(SEXP xSEXP, SEXP orderSEXP, SEXP verboseSEXP, SEXP sc_minSEXP, SEXP sc_maxSEXP, SEXP scale_ratioSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type order(orderSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< double >::type sc_min(sc_minSEXP);
    Rcpp::traits::input_parameter< double >::type sc_max(sc_maxSEXP);
    Rcpp::traits::input_parameter< double >::type scale_ratio(scale_ratioSEXP);
    rcpp_result_gen = Rcpp::wrap(dfa(x, order, verbose, sc_min, sc_max, scale_ratio));
    return rcpp_result_gen;
END_RCPP
}
// dlcca
arma::mat dlcca(arma::vec x, arma::vec y, int order, IntegerVector scales, int lags, char direction);
RcppExport SEXP _fractalRegression_dlcca(SEXP xSEXP, SEXP ySEXP, SEXP orderSEXP, SEXP scalesSEXP, SEXP lagsSEXP, SEXP directionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type order(orderSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type scales(scalesSEXP);
    Rcpp::traits::input_parameter< int >::type lags(lagsSEXP);
    Rcpp::traits::input_parameter< char >::type direction(directionSEXP);
    rcpp_result_gen = Rcpp::wrap(dlcca(x, y, order, scales, lags, direction));
    return rcpp_result_gen;
END_RCPP
}
// fftw_fft
arma::cx_vec fftw_fft(arma::cx_colvec in_vec, char fft_type);
RcppExport SEXP _fractalRegression_fftw_fft(SEXP in_vecSEXP, SEXP fft_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cx_colvec >::type in_vec(in_vecSEXP);
    Rcpp::traits::input_parameter< char >::type fft_type(fft_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(fftw_fft(in_vec, fft_type));
    return rcpp_result_gen;
END_RCPP
}
// iaafft_cpp
arma::mat iaafft_cpp(arma::vec signal, int N, int max_iter);
RcppExport SEXP _fractalRegression_iaafft_cpp(SEXP signalSEXP, SEXP NSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type signal(signalSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(iaafft_cpp(signal, N, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// make_complex
arma::cx_vec make_complex(arma::vec x);
RcppExport SEXP _fractalRegression_make_complex(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(make_complex(x));
    return rcpp_result_gen;
END_RCPP
}
// mfdfa
List mfdfa(NumericVector x, NumericVector q, int order, double scale_min, double scale_max, double scale_ratio);
RcppExport SEXP _fractalRegression_mfdfa(SEXP xSEXP, SEXP qSEXP, SEXP orderSEXP, SEXP scale_minSEXP, SEXP scale_maxSEXP, SEXP scale_ratioSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type order(orderSEXP);
    Rcpp::traits::input_parameter< double >::type scale_min(scale_minSEXP);
    Rcpp::traits::input_parameter< double >::type scale_max(scale_maxSEXP);
    Rcpp::traits::input_parameter< double >::type scale_ratio(scale_ratioSEXP);
    rcpp_result_gen = Rcpp::wrap(mfdfa(x, q, order, scale_min, scale_max, scale_ratio));
    return rcpp_result_gen;
END_RCPP
}
// colmeans
NumericVector colmeans(NumericMatrix X);
RcppExport SEXP _fractalRegression_colmeans(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(colmeans(X));
    return rcpp_result_gen;
END_RCPP
}
// mlra
List mlra(arma::vec x, arma::vec y, int order, IntegerVector scales, int lags, char direction);
RcppExport SEXP _fractalRegression_mlra(SEXP xSEXP, SEXP ySEXP, SEXP orderSEXP, SEXP scalesSEXP, SEXP lagsSEXP, SEXP directionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type order(orderSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type scales(scalesSEXP);
    Rcpp::traits::input_parameter< int >::type lags(lagsSEXP);
    Rcpp::traits::input_parameter< char >::type direction(directionSEXP);
    rcpp_result_gen = Rcpp::wrap(mlra(x, y, order, scales, lags, direction));
    return rcpp_result_gen;
END_RCPP
}
// lagn
arma::mat lagn(arma::vec x, int lags);
RcppExport SEXP _fractalRegression_lagn(SEXP xSEXP, SEXP lagsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type lags(lagsSEXP);
    rcpp_result_gen = Rcpp::wrap(lagn(x, lags));
    return rcpp_result_gen;
END_RCPP
}
// polyfit
arma::vec polyfit(arma::vec x, int order);
RcppExport SEXP _fractalRegression_polyfit(SEXP xSEXP, SEXP orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type order(orderSEXP);
    rcpp_result_gen = Rcpp::wrap(polyfit(x, order));
    return rcpp_result_gen;
END_RCPP
}
// detrend_var
arma::mat detrend_var(arma::mat X, int order);
RcppExport SEXP _fractalRegression_detrend_var(SEXP XSEXP, SEXP orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type order(orderSEXP);
    rcpp_result_gen = Rcpp::wrap(detrend_var(X, order));
    return rcpp_result_gen;
END_RCPP
}
// mra
List mra(arma::vec x, arma::vec y, int order, arma::ivec scales);
RcppExport SEXP _fractalRegression_mra(SEXP xSEXP, SEXP ySEXP, SEXP orderSEXP, SEXP scalesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type order(orderSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type scales(scalesSEXP);
    rcpp_result_gen = Rcpp::wrap(mra(x, y, order, scales));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fractalRegression_dcca", (DL_FUNC) &_fractalRegression_dcca, 4},
    {"_fractalRegression_dfa", (DL_FUNC) &_fractalRegression_dfa, 6},
    {"_fractalRegression_dlcca", (DL_FUNC) &_fractalRegression_dlcca, 6},
    {"_fractalRegression_fftw_fft", (DL_FUNC) &_fractalRegression_fftw_fft, 2},
    {"_fractalRegression_iaafft_cpp", (DL_FUNC) &_fractalRegression_iaafft_cpp, 3},
    {"_fractalRegression_make_complex", (DL_FUNC) &_fractalRegression_make_complex, 1},
    {"_fractalRegression_mfdfa", (DL_FUNC) &_fractalRegression_mfdfa, 6},
    {"_fractalRegression_colmeans", (DL_FUNC) &_fractalRegression_colmeans, 1},
    {"_fractalRegression_mlra", (DL_FUNC) &_fractalRegression_mlra, 6},
    {"_fractalRegression_lagn", (DL_FUNC) &_fractalRegression_lagn, 2},
    {"_fractalRegression_polyfit", (DL_FUNC) &_fractalRegression_polyfit, 2},
    {"_fractalRegression_detrend_var", (DL_FUNC) &_fractalRegression_detrend_var, 2},
    {"_fractalRegression_mra", (DL_FUNC) &_fractalRegression_mra, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_fractalRegression(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
